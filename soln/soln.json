[
    {
        "question": "Install and run Visual Studio Code. In your Terminal (or Command Prompt), type code -s and press Enter. Copy and paste the entire output below. What is the output of code -s?",
        "type": "hardcoded",
        "answer": "Version:          Code 1.96.4 (cd4ee3b1c348a13bafd8f9ad8060705f6d4b9cba, 2025-01-16T00:16:19.038Z)\nOS Version:       Linux x64 6.12.10-zen1-1-zen\nCPUs:             Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz (12 x 2599)\nMemory (System):  15.49GB (4.65GB free)\nLoad (avg):       4, 3, 2\nVM:               0%\nScreen Reader:    no\nProcess Argv:     --crash-reporter-id 665a5af3-33e0-432c-bc2b-355bdbdafc38\n\nGPU Status:       2d_canvas:                              enabled\n                  canvas_oop_rasterization:               enabled_on\n                  direct_rendering_display_compositor:    disabled_off_ok\n                  gpu_compositing:                        enabled\n                  multiple_raster_threads:                enabled_on\n                  opengl:                                 enabled_on\n                  rasterization:                          enabled\n                  raw_draw:                               disabled_off_ok\n                  skia_graphite:                          disabled_off\n                  video_decode:                           enabled\n                  video_encode:                           disabled_software\n                  vulkan:                                 disabled_off\n                  webgl:                                  enabled\n                  webgl2:                                 enabled\n                  webgpu:                                 disabled_off\n                  webnn:                                  disabled_off\n\nCPU %   Mem MB     PID  Process\n    1      206   70123  code main\n    0       48   70148     zygote\n    2      222   70187       gpu-process\n    0       48   70149     zygote\n    0        0   70151       zygote\n    0       79   70191     utility-network-service\n    0      111   70288  ptyHost\n    0        0   70356       /usr/bin/fish --init-command source \"/opt/visual-studio-code/resources/app/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.fish\"\n    0        0   70703         sh /opt/visual-studio-code/bin/code -s\n    0       79   70707           electron-nodejs (cli.js )\n    0      127   70721             /opt/visual-studio-code/code -s\n    0       48   70736               zygote\n    0      159   70776                 gpu-process\n    0       48   70737               zygote\n    0        0   70739                 zygote\n    0       63   70780               utility-network-service\n    0        0   70496       /usr/bin/fish --init-command source \"/opt/visual-studio-code/resources/app/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration.fish\"\n    0        0   70789       /bin/bash /opt/visual-studio-code/resources/app/out/vs/base/node/cpuUsage.sh 70356 70703 70707 70721 70736 70737 70739\n    0        0   70798         sleep 1\n   12      365   70300  extensionHost [1]\n    0       79   70479       electron-nodejs (languageserver.js )\n    0       79   70659       /opt/visual-studio-code/code /opt/visual-studio-code/resources/app/extensions/json-language-features/server/dist/node/jsonServerMain --node-ipc --clientProcessId=70300\n    0        0   70693       [fish] <defunct>\n   15      190   70316  shared-process\n    0      111   70317  fileWatcher [1]\n\nWorkspace Stats: \n|  Window (mandel.cu - Mandelbrot_Acceleration - Visual Studio Code)\n|    Folder (Mandelbrot_Acceleration): 9226 files\n|      File types: py(3424) pyc(3422) pyi(317) so(215) mat(109) h(80) txt(70)\n|                  afm(60) png(54) f90(53)\n|      Conf files: settings.json(1) makefile(1)"
    },
    {
        "question": "Running uv run --with httpie -- https [URL] installs the Python package httpie and sends a HTTPS request to the URL. \nSend a HTTPS request to https://httpbin.org/get with the URL encoded parameter email set to aakash.gorla@gramener.com \nWhat is the JSON output of the command? (Paste only the JSON body, not the headers)",
        "type": "",
        "answer": ""
    },
    {
        "question": "Let's make sure you know how to use npx and prettier.\nDownload\n\n. In the directory where you downloaded it, make sure it is called README.md, and run npx -y prettier@3.4.2 README.md | sha256sum.\nWhat is the output of the command?",
        "type": "cmdline",
        "answer": "npx -y prettier@3.4.2 README.md | sha256sum."
    },
    {
        "question": "Let's make sure you can write formulas in Google Sheets. Type this formula into Google Sheets. (It won't work in Excel)\n=SUM(ARRAY_CONSTRAIN(SEQUENCE(100, 100, 14, 11), 1, 10))",
        "type": "llm",
        "answer": ""
    },
    {
        "question": "Let's make sure you can write formulas in Excel. Type this formula into Excel.\nNote: This will ONLY work in Office 365.",
        "type": "llm",
        "answer": ""
    },
    {
        "question": "Just above this paragraph, there's a hidden input with a secret value.\n What is the value in the hidden input?",
        "type": "llm",
        "answer": ""
    },
    {
        "question": "How many Wednesdays are there in the date range 1986-11-08 to 2009-07-04?",
        "type": "llm",
        "answer": ""
    },
    {
        "question": "Download and unzip file\nwhich has a single extract.csv file inside.\nWhat is the value in the \"answer\" column of the CSV file?",
        "type": "code",
        "answer": "ga1_q8"  
    },
    {
        "question": " Let's make sure you know how to use JSON. Sort this JSON array of objects by the value of the age field. In case of a tie, sort by the name field. Paste the resulting JSON below without any spaces or newlines.\n[{\"name\":\"Alice\",\"age\":86},{\"name\":\"Bob\",\"age\":69},{\"name\":\"Charlie\",\"age\":25},{\"name\":\"David\",\"age\":44},{\"name\":\"Emma\",\"age\":42},{\"name\":\"Frank\",\"age\":76},{\"name\":\"Grace\",\"age\":15},{\"name\":\"Henry\",\"age\":84},{\"name\":\"Ivy\",\"age\":1},{\"name\":\"Jack\",\"age\":4},{\"name\":\"Karen\",\"age\":25},{\"name\":\"Liam\",\"age\":39},{\"name\":\"Mary\",\"age\":51},{\"name\":\"Nora\",\"age\":34},{\"name\":\"Oscar\",\"age\":39},{\"name\":\"Paul\",\"age\":74}]",
        "type": "llm",
        "answer": ""
    },
    {
        "question": "Download q-multi-cursor-json.txt and use multi-cursors and convert it into a single JSON object, where key=value pairs are converted into {key: value, key: value, ...}. \nWhat's the result when you paste the JSON at tools-in-data-science.pages.dev/jsonhash and click the Hash button?",
        "type": "",
        "answer": ""
    },
    {
        "question": " Let's make sure you know how to select elements using CSS selectors. Find all <div>s having a foo class in the hidden element below. What's the sum of their data-value attributes?\nSum of data-value attributes:",
        "type": "none",
        "answer": "428"
    },
    {
        "question": "Download and process the files in q-unicode-data.zip which contains three files with different encodings: \n data1.csv: CSV file encoded in CP-1252 \n data2.csv: CSV file encoded in UTF-8 \n data3.txt: Tab-separated file encoded in UTF-16 \n Each file has 2 columns: symbol and value. Sum up all the values where the symbol matches œ OR ˜ across all three files. \n What is the sum of all values associated with these symbols?",
        "type": "code",
        "answer": "ga1_q12"
    },
    {
        "question": " Let's make sure you know how to use GitHub. Create a GitHub account if you don't have one. Create a new public repository. Commit a single JSON file called email.json with the value {\"email\": \"aakash.gorla@gramener.com\"} and push it.\nEnter the raw Github URL of email.json so we can verify it. (It might look like https://raw.githubusercontent.com/[GITHUB ID]/[REPO NAME]/main/email.json.)",
        "type": "cmdline",
        "answer": ""
    },
    {
        "question":"Download q-replace-across-all-files.zip and unzip it into a new folder, then replace all \"IITM\" (in upper, lower, or mixed case) with \"IIT Madras\" in all files. Leave everything as-is - don't change the line endings. What does running cat * | sha256sum in that folder show in bash? ",
        "type": "cmdline",
        "answer": ""
    },
    {
        "question": "Download q-list-files-attributes.zip and extract it. Use ls with options to list all files in the folder along with their date and file size. What's the total size of all files at least 7253 bytes large and modified on or after Sun, 14 Jun, 2020, 7:07 am IST? ",
        "type": "cmdline",
        "answer": ""
    },
    {
        "question": "Download q-move-rename-files.zip and extract it. Use mv to move all files under folders into an empty folder. Then rename all files replacing each digit with the next. 1 becomes 2, 9 becomes 0, a1b9c.txt becomes a2b0c.txt.\nWhat does running grep . * | LC_ALL=C sort | sha256sum in bash on that folder show? ",
        "type": "cmdline",
        "answer": ""
    },
    {
        "question": "Download q-compare-files.zip and extract it. It has 2 nearly identical files, a.txt and b.txt, with the same number of lines.\nHow many lines are different between a.txt and b.txt? ",
        "type": "cmdline",
        "answer": ""
    },
    {
        "question": "There is a tickets table in a SQLite database that has columns type, units, and price. Each row is a customer bid for a concert ticket.\ntype\tunits\tprice\nSilver\t627\t1.16\nSILVER\t425\t0.88\nSilver\t608\t1.47\nBRONZE\t880\t1.64\nbronze\t862\t0.75",
        "type": "hardcoded",
        "answer": "SELECT SUM(units * price) AS total_sales FROM tickets WHERE TRIM(LOWER(type)) = 'gold';"
    },
    {
        "question": "Write documentation in Markdown for an **imaginary** analysis of the number of steps you walked each day for a week, comparing over time and with friends. The Markdown must include:\n\nTop-Level Heading: At least 1 heading at level 1, e.g., # Introduction\nSubheadings: At least 1 heading at level 2, e.g., ## Methodology\nBold Text: At least 1 instance of bold text, e.g., **important**\nItalic Text: At least 1 instance of italic text, e.g., *note*\nInline Code: At least 1 instance of inline code, e.g., sample_code\nCode Block: At least 1 instance of a fenced code block, e.g.\n\nprint(\"Hello World\")\nBulleted List: At least 1 instance of a bulleted list, e.g., - Item\nNumbered List: At least 1 instance of a numbered list, e.g., 1. Step One\nTable: At least 1 instance of a table, e.g., | Column A | Column B |\nHyperlink: At least 1 instance of a hyperlink, e.g., [Text](https://example.com)\nImage: At least 1 instance of an image, e.g., ![Alt Text](https://example.com/image.jpg)\nBlockquote: At least 1 instance of a blockquote, e.g., > This is a quote",
        "type": "none",
        "answer": "# Weekly Step Analysis\n\n## Introduction\nTracking daily step counts is an effective way to monitor physical activity. This analysis examines the number of steps walked each day over a week, comparing trends over time and with friends.\n\n## Methodology\nThe step data was collected using a fitness tracker and recorded daily. The data was then analyzed using Python.\n\n## Data Collection\nThe steps were tracked using a pedometer and logged in a structured format. Below is a sample of the dataset:\n\n```python\nsteps_data = {\n    \"Monday\": 8000,\n    \"Tuesday\": 7500,\n    \"Wednesday\": 8200,\n    \"Thursday\": 7800,\n    \"Friday\": 9000,\n    \"Saturday\": 10000,\n    \"Sunday\": 9500\n}\n```\n\n## Analysis\n- **Comparison Over Time:** Trends in step counts were observed to identify patterns.\n- *Peer Comparison:* Step counts were compared with friends' data to analyze competitiveness.\n- Identified days with **significant** deviations from the average.\n\n## Results\n### Step Count Table\n| Day       | Steps Walked |\n|-----------|-------------|\n| Monday    | 8000        |\n| Tuesday   | 7500        |\n| Wednesday | 8200        |\n| Thursday  | 7800        |\n| Friday    | 9000        |\n| Saturday  | 10000       |\n| Sunday    | 9500        |"
    },
    {
        "question": "Download the image below and compress it losslessly to an image that is less than 1,500 bytes. By losslessly, we mean that every pixel in the new image should be identical to the original image.",
        "type": "none",
        "answer": ""
    },
    {
        "question": "Publish a page using GitHub Pages that showcases your work. Ensure that your email address krishna.kumar@gramener.com is in the page's HTML.\n\nGitHub pages are served via CloudFlare which obfuscates emails. So, wrap your email address inside a:\n\n<!--email_off-->krishna.kumar@gramener.com<!--/email_off-->\nWhat is the GitHub Pages URL? It might look like: https://[USER].github.io/[REPO]/",
        "type": "",
        "answer": "https://krishna-gramener.github.io/PersonalPage-TDSAssignment2/"
    },
    {
        "question": "Let's make sure you can access Google Colab. Run this program on Google Colab, allowing all required access to your email ID: krishna.kumar@gramener.com.\n\nimport hashlib\nimport requests\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\nauth.authenticate_user()\ncreds = GoogleCredentials.get_application_default()\ntoken = creds.get_access_token().access_token\nresponse = requests.get(\n  \"https://www.googleapis.com/oauth2/v1/userinfo\",\n  params={\"alt\": \"json\"},\n  headers={\"Authorization\": f\"Bearer {token}\"}\n)\nemail = response.json()[\"email\"]\nhashlib.sha256(f\"{email} {creds.token_expiry.year}\".encode()).hexdigest()[-5:]\nWhat is the result? (It should be a 5-character string)",
        "type": "code",
        "answer": "ff5d2"
    },
    {
        "question": "Download this image. Create a new Google Colab notebook and run this code (after fixing a mistake in it) to calculate the number of pixels with a certain minimum brightness:\n\nimport numpy as np\nfrom PIL import Image\nfrom google.colab import files\nimport colorsys\n\n# There is a mistake in the line below. Fix it\nimage = Image.open(list(files.upload().keys)[0])\n\nrgb = np.array(image) / 255.0\nlightness = np.apply_along_axis(lambda x: colorsys.rgb_to_hls(*x)[1], 2, rgb)\nlight_pixels = np.sum(lightness > 0.529)\nprint(f'Number of pixels with lightness > 0.529: {light_pixels}')\nWhat is the result? (It should be a number)",
        "type": "none",
        "answer": "154203"
    },
    {
        "question": "Download this q-vercel-python.json which has the marks of 100 imaginary students.\n\nCreate and deploy a Python app to Vercel. Expose an API so that when a request like https://your-app.vercel.app/api?name=X&name=Y is made, it returns a JSON response with the marks of the names X and Y in the same order, like this:\n\n{ \"marks\": [10, 20] }\nMake sure you enable CORS to allow GET requests from any origin.\n\nWhat is the Vercel URL? It should look like: https://your-app.vercel.app/api",
        "type": "none",
        "answer": "https://vercel-tds-lemon.vercel.app/api"
    },
    {
        "question": "Create a GitHub action on one of your GitHub repositories. Make sure one of the steps in the action has a name that contains your email address krishna.kumar@gramener.com. For example:\n\njobs:\n  test:\n    steps:\n      - name: krishna.kumar@gramener.com\n        run: echo \"Hello, world!\"\n      \nTrigger the action and make sure it is the most recent action.\n\nWhat is your repository URL? It will look like: https://github.com/USER/REPO",
        "type": "none",
        "answer": "https://github.com/krishna-gramener/PersonalPage-TDSAssignment2"
    },
    {
        "question": "Create and push an image to Docker Hub. Add a tag named krishna.kumar to the image.\n\nWhat is the Docker image URL? It should look like: https://hub.docker.com/repository/docker/$USER/$REPO/general",
        "type": "none",
        "answer": "https://hub.docker.com/repository/docker/ninjacoder11/myrepo/tags/krishna.kumar/sha256-bc75e43a212e9833b04c2721a81ee13bcce49bbff8318fcb9ab0878d3634b7a3"
    },
    {
        "question": "Download q-fastapi.csv. This file has 2-columns:\n\nstudentId: A unique identifier for each student, e.g. 1, 2, 3, ...\nclass: The class (including section) of the student, e.g. 1A, 1B, ... 12A, 12B, ... 12Z\nWrite a FastAPI server that serves this data. For example, /api should return all students data (in the same row and column order as the CSV file) as a JSON like this:\n\n{\n  \"students\": [\n    {\n      \"studentId\": 1,\n      \"class\": \"1A\"\n    },\n    {\n      \"studentId\": 2,\n      \"class\": \"1B\"\n    }, ...\n  ]\n}\nIf the URL has a query parameter class, it should return only students in those classes. For example, /api?class=1A should return only students in class 1A. /api?class=1A&class=1B should return only students in class 1A and 1B. There may be any number of classes specified. Return students in the same order as they appear in the CSV file (not the order of the classes).\n\nMake sure you enable CORS to allow GET requests from any origin.\n\nWhat is the API URL endpoint for FastAPI? It might look like: http://127.0.0.1:8000/api",
        "type": "none",
        "answer": "http://127.0.0.1:8000/api"
    },
    {
        "question": "Download Llamafile. Run the Llama-3.2-1B-Instruct.Q6_K.llamafile model with it.\n\nCreate a tunnel to the Llamafile server using ngrok.\n\nWhat is the ngrok URL? It might look like: https://[random].ngrok-free.app/",
        "type": "none",
        "answer": "https://ef8e-2409-40c4-187-e0b8-3db8-b66-3950-96fc.ngrok-free.app/"
    }
]